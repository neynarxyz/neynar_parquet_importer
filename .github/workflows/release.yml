name: Create Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install uv package manager
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Install tomli directly
        run: |
          pip install tomli

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Install dependencies with uv
        run: |
          uv sync

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l "v${{ steps.get_version.outputs.version }}" | wc -l)
          if [ "$TAG_EXISTS" -gt "0" ]; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release exists
        id: check_release
        run: |
          EXISTS=$(gh release view v${{ steps.get_version.outputs.version }} > /dev/null 2>&1 && echo "true" || echo "false")
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.get_version.outputs.version }} exists: $EXISTS"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        if: steps.check_release.outputs.exists == 'false'
        run: |
          pip install build

      - name: Build package
        if: steps.check_release.outputs.exists == 'false'
        run: python -m build

      - name: Upload Build Artifacts
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
